"解耦:解耦的目的是实现代码高内聚、松耦合"

软件设计与开发最重要的工作之一就是应对复杂性。人处理复杂性的能力有限。
过于复杂的代码往往可读性、可维护性都不友好，解耦是最有效的手段。

代码是否需要"解耦":
    1、看修改代码会不会牵一发而动全身。
    2、阅读源码的时候，就是把模块与模块之间、类与类之间的依赖关系画出来，
        更加依赖关系的复杂性来判断是否需要解耦重构。

如何给代码解耦：
    1、封装与抽象
        封装和抽象可以有效地隐藏实现的复杂性，隔离实现的易变性，给依赖的模块提供稳定且易用的抽象接口。
    2、中间层
        第一阶段：引入一个中间层，包裹老的接口，提供新的接口定义。
        第二阶段：新开发的代码依赖中间层提供的新接口。
        第三阶段：将依赖老接口的代码改为调用新接口。
        第四阶段：确保所有的代码都调用新接口之后，删除掉老的接口。
    3、模块化：
       模块化思想更加本质的东西就是分而治之。


