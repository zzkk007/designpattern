package com.km.designpattern.geekbang.beautyDesign22;


/**
 *  高内聚，低耦合
 *  所谓高内聚，就是指相近的功能应该放到同一个类中，不相近的功能不要放在同一个类中。
 *  相近功能往往会被同时修改，放到同一个类中，修改会比较集中。
 *
 *  所谓松耦合指的是，在代码中，类与类之间的依赖关系简单清晰。
 *  即使两个类有依赖关系，一个类的代码改动也不会或者很少导致依赖类的代码改动。
 *
 *  迪米特法则：
 *  不该有直接依赖关系的类之间，不要有依赖；有依赖关系的类之间，尽量只依赖必要的接口。
 *  迪米特法则是希望减少类之间的耦合，让类越独立越好。每个类都应该少了解系统的其他部分。
 *  一旦发生变化，需要了解这一变化的类就会比较少。
 *
 *  “高内聚、松耦合”“单一职责原则”“接口隔离原则”“基于接口而非实现编程”“迪米特法则”，你能总结一下它们之间的区别和联系吗？
 *  目的都是实现高内聚低耦合，但是出发的角度不一样，单一职责是从自身提供的功能出发，
 *  迪米特法则是从关系出发，针对接口而非实现编程是使用者的角度，殊途同归。
 */

public class NetworkTransporter {
    // 省略属性和其他方法...
    public Byte[] send(String address, Byte[] data) {
        //
        return null;
    }

}