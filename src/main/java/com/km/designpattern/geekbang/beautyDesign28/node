为了保证重构不出错，有哪些非常能落地的技术手段？

最可落地执行、最有效的保证重构不出错的手段应该就是单元测试（Unit Testing）

1、什么是单元测试：

    单元测试由研发工程师自己来编写，用来测试自己写的代码的正确性。
    单元测试相对于集成测试来说，测试的粒度更小。
    集成测试的测试对象是整个系统或者某个功能模块。
    单元测试的测试对象是类或者函数，用来测试一个类和函数是否按照预期的逻辑执行。这是代码层级的测试。

2、为什么要写单元测试：

    (1) 单元测试能有效地帮你发现代码中的bug
    (2) 写单元测试能帮你发现代码设计上的问题
        对于一段代码，如果很难为其编写单元测试，或者编写单元测试很吃力
        那往往就意味者代码设计得不够合理。
    (3) 单元测试是对集成测试的有力补充。
    (4) 写单元测试的过程本身就是代码重构的过程。
    (5) 阅读单元测试能帮助你快速熟悉代码。
    (6) 单元测试是 TDD 可落地执行的改进方案。
        测试驱动开发（Test-Driven Development 简称TDD）
        是一个经常被提及但很少被执行的开发模式。它的核心指导思想就是测试用例先于代码编写。
        我个人觉得，单元测试正好是对 TDD 的一种改进方案，先写代码，紧接着写单元测试，
        最后根据单元测试反馈出来问题，再回过头去重构代码。这个开发流程更加容易被接受，
        更加容易落地执行，而且又兼顾了 TDD 的优点。

3、如何编写单元测试：

    写单元测试就是针对代码设计覆盖各种输入、异常、边界条件的测试用例，并将测试用例翻译成代码的过程。


4. 单元测试为何难落地执行？
    一方面，写单元测试本身比较繁琐，技术挑战不大，很多程序员不愿意去写；
    另一方面，国内研发比较偏向“快、糙、猛”，容易因为开发进度紧，导致单元测试的执行虎头蛇尾。
    最后，关键问题还是团队没有建立对单元测试正确的认识，觉得可有可无，单靠督促很难执行得很好。

