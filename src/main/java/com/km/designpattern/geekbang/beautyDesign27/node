
面向对象设计和实现要做的事情，就是把合适的代码放到合适的类中。

理论1:
    什么情况下要重构，到底重构什么？又该如何重构

    重构需要你能洞察出代码存在的坏味道或者设计上的不足，并且能合理、熟练地利用设计思想、原则、模式、编程规范等理论知识解决这些问题。
    1、重构的概括性介绍: 重构的目的、对象、时机、方法
    2、保证重构不错的手段、 单元测试、代码的可测试性
    3、不同规模的重构，大规模高层次重构（系统，模块、代码结构、类与类之间的交互等）、小规模低层次重构（类、函数、变量等重构）。


重构的目的:
    重构是一种对软件内部结构的改善，目的是在不改变软件的可见行为的情况下，使其更易理解，修改成本更低。
    在保持功能不变的前提下，利用设计思想、原则、模式、编程规范等理论来优化代码，修改设计上的不足，提高代码质量。

    重构是时刻保证代码质量的一个极其有效的手段，不至于让代码腐朽到无可求药的地步。
    初级工程师在维护代码，高级工程师在设计代码，资深工程师在重构代码

重构的对象: 到底重构什么(what):

    大型重构指对顶层代码设计: 系统、模块、代码结构、类与类之间的关系
    重构手段： 分层、模块化、解耦、抽象可复用组件等。
    工具：设计思想、原则和模式。

    小型重构指的是对代码细节的重构，主要是针对类、函数、变量等代码级别的重构。
    比如规范命名、规范注释、消除超大类或函数、提取重复代码等等。
    小型重构更多的是利用我们能后面要讲到的编码规范。

重构的时机: 什么时候重构(when):

    可持续、可演进的方式。
    重构的策略是持续重构，在平时没事的时候，写的不够好的，可优化的代码，主动去重构。
    在修改、添加某个功能代码的时候，顺手把不符合编程规范、不好的重构一下。
    总之，就像把单元测试、Code Review 作为开发的一部分，
    我们如果能把持续重构也作为开发的一部分，成为一种开发习惯，对项目、对自己都会很有好处。

重构的方法：改如何去重构(how):
    在进行大型重构的时候，我们要提前做好完善的重构计划，有条不紊地分阶段来进行。
    每个阶段完成一小部分代码的重构，然后提交、测试、运行，发现没有问题之后，再继续进行下一阶段的重构，
    保证代码仓库中的代码一直处于可运行、逻辑正确的状态。

    实际上，除了人工去发现低层次的质量问题，我们还可以借助很多成熟的静态代码分析工具
    （比如 CheckStyle、FindBugs、PMD），来自动发现代码中的问题，然后针对性地进行重构优化。







